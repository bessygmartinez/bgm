{"version":3,"sources":["logo.svg","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","handleToggle","bar","$","head","navitems","navbg","navwrap","toggleClass","className","onClick","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,4KC6C5BC,G,wNAvCbC,aAAe,WACb,IAAMC,EAAMC,IAAE,QACRC,EAAOD,IAAE,SACTE,EAAWF,IAAE,cACbG,EAAQH,IAAE,WACVI,EAAUJ,IAAE,aAElBA,IAAED,GAAKM,YAAY,UACnBL,IAAEC,GAAMI,YAAY,UACpBL,IAAEE,GAAUG,YAAY,UACxBL,IAAEG,GAAOE,YAAY,UACrBL,IAAEI,GAASC,YAAY,W,uDAIvB,OACE,yBAAKC,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,WACX,wCACA,yCAEJ,yBAAKA,UAAU,WACX,uCACA,+CAGR,yBAAKA,UAAU,WACf,yBAAKA,UAAU,aACjB,yBAAKA,UAAU,UAAUC,QAASC,KAAKV,cACrC,yBAAKQ,UAAU,cACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,oB,GAjCPG,IAAMC,Y,MCkBTC,MAnBf,WACE,OACE,6BAGM,kBAAC,EAAD,MAEA,yBAAKL,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACf,wBAAIA,UAAU,4BAAd,2BAAiE,6BACjE,uBAAGA,UAAU,wBAAb,cCHMM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,IAAD,CAAQC,SAAUC,QAAwB,kBAAE,EAAF,OAAmBC,SAASC,eAAe,SD4H/F,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2ba146a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d959e21c.svg\";","import React from \"react\";\r\nimport $ from \"jquery\";\r\nimport logo from \"../../logo.svg\";\r\nimport \"./nav.css\";\r\n\r\nclass Nav extends React.Component {\r\n  handleToggle = () => {\r\n    const bar = $(\".bar\");\r\n    const head = $(\".head\");\r\n    const navitems = $(\".nav-items\");\r\n    const navbg = $(\".nav-bg\");\r\n    const navwrap = $(\".nav-wrap\");\r\n\r\n    $(bar).toggleClass(\"active\");\r\n    $(head).toggleClass(\"active\");\r\n    $(navitems).toggleClass(\"active\");\r\n    $(navbg).toggleClass(\"active\");\r\n    $(navwrap).toggleClass(\"active\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"head\">\r\n          <div className=\"nav-items\">\r\n              <div className=\"nav-col\">\r\n                  <h2>About Me</h2>\r\n                  <p>Who am I?</p>\r\n              </div>\r\n              <div className=\"nav-col\">\r\n                  <h2>My Work</h2>\r\n                  <p>Here's my work</p>\r\n              </div>\r\n          </div>\r\n          <div className=\"nav-bg\"></div>\r\n          <div className=\"nav-wrap\"></div>\r\n        <div className=\"nav-div\" onClick={this.handleToggle}>\r\n          <div className=\"bar first\"></div>\r\n          <div className=\"bar second\"></div>\r\n          <div className=\"bar third\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n        {/* <Navbar /> */}\n\n          <Nav />\n\n          <div className=\"row\">\n            <div className=\"col s12\">\n              <div className=\"landing-div\">\n              <h1 className=\"center-align greeny-text\">Hello. My name is Bessy.<br></br>\n              <i className=\"large material-icons\">mood</i></h1>\n              </div>\n            </div>\n          </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}